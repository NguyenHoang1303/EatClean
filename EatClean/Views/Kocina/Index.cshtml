@model PagedList.IPagedList<EatClean.Entity.Article>
@using PagedList.Mvc;
@{
    ViewBag.Title = "Home Page";
    var msg = ViewBag.errorArticleDt;
    var categories = ViewBag.categories;


}

<div class="uk-container">
    <div class="uk-border-rounded-large uk-background-top-center uk-background-cover
    uk-background-norepeat uk-light uk-inline uk-overflow-hidden uk-width-1-1"
         style="background-image: url(https://res.cloudinary.com/hung71294/image/upload/v1654306139/bg-headline-home-1200x438_qney6r.jpg); ">
        <div class="uk-position-cover uk-header-overlay"></div>
        <div class="uk-position-relative" data-uk-grid>
            <div class="uk-width-1-2@m uk-flex uk-flex-middle">
                <div class="uk-padding-large uk-padding-remove-right">
                    <h1 class="uk-heading-small uk-margin-remove-top">Choose from thousands of recipes</h1>
                    <p class="uk-text-secondary">
                        Appropriately integrate technically sound value with scalable infomediaries
                        negotiate sustainable strategic theme areas
                    </p>
                    <a class="uk-text-secondary uk-text-600 uk-text-small hvr-forward" href="/Kocina/Login">
                        Sign up today<span class="uk-margin-small-left" data-uk-icon="arrow-right"></span>
                    </a>
                </div>
            </div>
            <div class="uk-width-expand@m">
            </div>
        </div>
    </div>
</div>

<div class="uk-section uk-section-default">
    <div class="uk-container">
        <div data-uk-grid>
            <div class="uk-width-1-4@m sticky-container">
                <div data-uk-sticky="offset: 100; bottom: true;">
                    <h2>Recipes</h2>
                    @{
                        List<int> mapIdCate = new List<int>();
                        foreach (var cate in categories)
                        {

                            if (cate.ParentId == 0)
                            {
                                mapIdCate.Add(cate.Id);
                            }

                        }
                        Dictionary<int, dynamic> map = new Dictionary<int, dynamic>();
                        mapIdCate.ForEach(idc =>
                        {
                            List<dynamic> list = new List<dynamic>();
                            foreach (var cate in categories)
                            {

                                if (cate.ParentId == idc)
                                {
                                    list.Add(cate);
                                }

                            }
                            map.Add(idc, list);
                        });

                    }

                    <ul class="uk-nav-default uk-nav-parent-icon uk-nav-filter uk-margin-medium-top" data-uk-nav>
                        @foreach (var cate in categories)
                        {
                            if (cate.ParentId == 0)
                            {
                                <li class="uk-parent uk-open">
                                    <a href="#">@cate.Name</a>
                                    <ul class="uk-nav-sub">
                                        @foreach (var sub in map)
                                        {
                                            if (sub.Key == cate.Id)
                                            {
                                                foreach (var value in sub.Value)
                                                {
                                                    <li><a href="~/Kocina/Index?categoryId=@cate.Id">@value.Name</a></li>
                                                }
                                            }
                                        }
                                    </ul>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
            <div class="uk-width-expand@m">
                <div class="uk-child-width-1-2 uk-child-width-1-3@s" data-uk-grid>
                    @foreach (var item in Model)
                    {
                        <div>
                            <div class="uk-card">
                                <div class="uk-card-media-top uk-inline uk-light">
                                    <img class="uk-border-rounded-medium" style="width: 300px; height: 160px" src="@(!string.IsNullOrEmpty(item.Thumbnail) ? item.Thumbnail : "https://via.placeholder.com/300x160")" alt="Course Title">
                                    <div class="uk-position-cover uk-card-overlay uk-border-rounded-medium"></div>
                                    <div class="uk-position-xsmall uk-position-top-right">
                                        @*<a href="#" class="uk-icon-button uk-like uk-position-z-index uk-position-relative"
                                        data-uk-icon="heart"></a>*@
                                    </div>
                                </div>
                                <div>
                                    <h3 class="uk-card-title uk-text-500 uk-margin-small-bottom uk-margin-top">@(!string.IsNullOrEmpty(item.Title) ? item.Title : "No Title")</h3>
                                    <div class="uk-text-xsmall uk-text-muted" data-uk-grid>
                                        <div class="uk-width-auto uk-flex uk-flex-middle">
                                            @*<span class="uk-rating-filled" data-uk-icon="icon: star; ratio: 0.7"></span>

                                            <span class="uk-margin-xsmall-left">5.0</span>
                                            <span>(73)</span>*@
                                        </div>
                                        <div class="uk-width-expand uk-text-right">@(string.Equals(item.AuthorId,"1") ? "by Admin" : item.AuthorId.ToString())</div>

                                    </div>

                                </div>
                                <a href="/Kocina/Recipe/@item.Id" class="uk-position-cover"></a>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
        <div style="display: flex; justify-content:center" class="uk-margin-large-top uk-text-small">
            <p>
                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
                of @Model.PageCount
            </p>
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions()
               {
                   UlElementClasses = new List<string> { "uk-pagination", "uk-flex-center", "uk-text-500", "uk-margin-remove" }
               })
        </div>
    </div>
   
    <br />
